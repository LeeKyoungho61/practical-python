


# 1.5 리스트 ###########################################################
값의 순서가 유지되는 컬렉션

리스트 생성
    대괄호를 사용해 리스트 리터럴을 정의한다.
    names = [ 'Elwood', 'Jake', 'Curtis' ]
    nums = [ 39, 38, 42, 65, 111]

    >>> line = 'GOOG,100,490.10'
    >>> row = line.split(',')
    >>> row
    ['GOOG', '100', '490.10']

    names.append('Murphy')    # 마지막에 추가
    names.insert(2, 'Aretha') # 중간에 삽입

    s = [1, 2, 3]
    t = ['a', 'b']
    s + t           # [1, 2, 3, 'a', 'b']

리스트의 인덱스에는 정수를 사용한다. 인덱스는 0부터 시작한다.
    names = [ 'Elwood', 'Jake', 'Curtis' ]
    names[0]  # 'Elwood'
    names[1]  # 'Jake'
    names[2]  # 'Curtis'
    음수 인덱스는 뒤에서부터 센다.
    names[-1] # 'Curtis'

리스트의 항목을 변경할 수 있다.
    names[1] = 'Joliet Jake'
    names                     # [ 'Elwood', 'Joliet Jake', 'Curtis' ]

리스트의 길이.
    names = ['Elwood','Jake','Curtis']
    len(names)  # 3

멤버십 테스트(in, not in).
    'Elwood' in names       # True
    'Britney' not in names  # True


리스트 이터레이션(Iteration)과 검색
    for를 사용해 리스트 내용을 훑는다.
    for name in names:
        # name을 사용
        # 예: print(name)

무엇의 위치를 재빨리 찾으려면 index()를 사용한다.
    names = ['Elwood','Jake','Curtis']
    names.index('Curtis')   # 2
    원소를 찾지 못하면 ValueError 예외를 일으킨다.


리스트 제거
특정 값 또는 인덱스를 갖는 항목을 제거할 수 있다.
    # 값을 사용
    names.remove('Curtis')
    # 인덱스를 사용
    del names[1]

리스트 정렬
리스트를 "제자리에서(in-place)" 정렬할 수 있다.

    s = [10, 1, 7, 3]
    s.sort()                    # [1, 3, 7, 10]

    # 역순
    s = [10, 1, 7, 3]
    s.sort(reverse=True)        # [10, 7, 3, 1]

    # 순서가 유지되는 자료형에 동일하게 적용된다
    s = ['foo', 'bar', 'spam']
    s.sort()                    # ['bar', 'foo', 'spam']

    새 리스트를 만들고 싶으면 sorted()를 사용한다.
    t = sorted(s)               # s는 바뀌지 않으며, t는 정렬된 값을 가짐


# 1.6 파일 관리 #########################################################
파일을 연다.
    f = open('foo.txt', 'rt')     # 읽기를 위해 열기(텍스트)
    g = open('bar.txt', 'wt')     # 쓰기를 위해 열기(텍스트)
모든 데이터를 읽는다.
    data = f.read()
    data = f.read([maxbytes])  # 'maxbytes' 바이트까지만 읽음
텍스트를 기록한다.
    g.write('some text')
마쳤으면 파일을 닫는다.
    f.close()
    g.close()

with open(filename, 'rt') as file:
    # `file` 파일을 사용
    ...
    # 명시적으로 닫지 않아도 된다
...문장
이렇게 하면 들여쓴 코드 블록에서 벗어날 때 파일이 자동으로 닫힌다.

파일 데이터를 읽는 일반적인 방법
파일 전체를 한번에 읽어 문자열로 처리한다.
    with open('foo.txt', 'rt') as file:
        data = file.read()  # `data`는 `foo.txt`의 텍스트 전체로 된 문자열이다
파일을 한 행씩 읽어 내려가기.
    with open(filename, 'rt') as file:
        for line in file:
            # 행을 처리

파일에 쓰는 일반적인 방법
문자열 데이터를 기록한다.
    with open('outfile', 'wt') as out:
        out.write('Hello World\n')
        ...
print 함수의 출력을 재지정(redirect)한다.
    with open('outfile', 'wt') as out:
        print('Hello World', file=out)
        ...

# 1.7